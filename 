TOP(1)                              User Commands                              TOP(1)

NNAAMMEE
       top - display Linux processes

SSYYNNOOPPSSIISS
       ttoopp -hhvv|-bbccEEHHiiOOSSss11 -dd secs -nn max -uu|UU user -pp pid -oo fld -ww [cols]

       The traditional switches `-' and whitespace are optional.

DDEESSCCRRIIPPTTIIOONN
       The ttoopp program provides a dynamic real-time view of a running system.  It can
       display ssyysstteemm summary information as well as a list of pprroocceesssseess  or  tthhrreeaaddss
       currently  being managed by the Linux kernel.  The types of system summary in‐
       formation shown and the types, order and size  of  information  displayed  for
       processes are all user configurable and that configuration can be made persis‐
       tent across restarts.

       The program provides a limited interactive interface for process  manipulation
       as well as a much more extensive interface for personal configuration  --  en‐
       compassing every aspect of its  operation.   And  while  ttoopp  is  referred  to
       throughout  this document, you are free to name the program anything you wish.
       That new name, possibly an alias, will then be reflected on top's display  and
       used when reading and writing a configuration file.

OOVVEERRVVIIEEWW
   DDooccuummeennttaattiioonn
       The remaining Table of Contents

           OVERVIEW
              Operation
              Linux Memory Types
           1. COMMAND-LINE Options
           2. SUMMARY Display
              a. UPTIME and LOAD Averages
              b. TASK and CPU States
              c. MEMORY Usage
           3. FIELDS / Columns Display
              a. DESCRIPTIONS of Fields
              b. MANAGING Fields
           4. INTERACTIVE Commands
              a. GLOBAL Commands
              b. SUMMARY AREA Commands
              c. TASK AREA Commands
                 1. Appearance
                 2. Content
                 3. Size
                 4. Sorting
              d. COLOR Mapping
           5. ALTERNATE-DISPLAY Provisions
              a. WINDOWS Overview
              b. COMMANDS for Windows
              c. SCROLLING a Window
              d. SEARCHING in a Window
              e. FILTERING in a Window
           6. FILES
              a. PERSONAL Configuration File
              b. ADDING INSPECT Entries
              c. SYSTEM Configuration File
              d. SYSTEM Restrictions File
           7. STUPID TRICKS Sampler
              a. Kernel Magic
              b. Bouncing Windows
              c. The Big Bird Window
              d. The Ol' Switcheroo
           8. BUGS, 9. SEE Also

   OOppeerraattiioonn
       When operating top, the two most important keys are the help (h or ?)  key and
       quit (`q') key.  Alternatively, you could simply use the traditional interrupt
       key (^C) when you're done.

       When  started  for  the first time, you'll be presented with these traditional
       elements on the main top screen: 1) Summary Area; 2) Fields/Columns Header; 3)
       Task Area.  Each of these will be explored in the sections that follow.  There
       is also an Input/Message line between the  Summary  Area  and  Columns  Header
       which needs no further explanation.

       The  main top screen is _g_e_n_e_r_a_l_l_y quite adaptive to changes in terminal dimen‐
       sions under X-Windows.  Other top screens may be  less  so,  especially  those
       with  static  text.  It ultimately depends, however, on your particular window
       manager and terminal emulator.  There may be occasions when their view of ter‐
       minal size and current contents differs from top's view, which is always based
       on operating system calls.

       Following any re-size operation, if a top screen is corrupted, appears  incom‐
       plete  or  disordered,  simply  typing  something innocuous like a punctuation
       character or cursor motion key will usually restore it.  In extreme cases, the
       following sequence almost certainly will:
              _k_e_y_/_c_m_d  _o_b_j_e_c_t_i_v_e
              ^Z       ssuussppeenndd top
              fg       rreessuummee top
              <Left>   force a screen rreeddrraaww (if necessary)

       But  if  the display is still corrupted, there is one more step you could try.
       Insert this command after top has been suspended but before resuming it.
              _k_e_y_/_c_m_d  _o_b_j_e_c_t_i_v_e
              reset    restore your tteerrmmiinnaall sseettttiinnggss

       NNoottee: the width of top's display will be limited to 512 positions.  Displaying
       all  fields  requires approximately 250 characters.  Remaining screen width is
       usually allocated to any variable width columns currently visible.  The  vari‐
       able  width  columns,  such as COMMAND, are noted in topic 3a. DESCRIPTIONS of
       Fields.  Actual output width may also be influenced by the -w switch, which is
       discussed in topic 1. COMMAND-LINE Options.

       Lastly,  some  of  top's screens or functions require the use of cursor motion
       keys like the standard arrow keys plus the Home, End, PgUp and PgDn keys.   If
       your  terminal or emulator does not provide those keys, the following combina‐
       tions are accepted as alternatives:
              _k_e_y      _e_q_u_i_v_a_l_e_n_t_-_k_e_y_s
              Left     alt + hh
              Down     alt + jj
              Up       alt + kk
              Right    alt + ll
              Home     alt + ctrl + hh
              PgDn     alt + ctrl + jj
              PgUp     alt + ctrl + kk
              End      alt + ctrl + ll

       The UUpp and DDoowwnn arrow keys have special significance when  prompted  for  line
       input  terminated  with the <Enter> key.  Those keys, or their aliases, can be
       used to retrieve previous input lines which can then be edited  and  re-input.
       And there are four additional keys available with line oriented input.
              _k_e_y      _s_p_e_c_i_a_l_-_s_i_g_n_i_f_i_c_a_n_c_e
              Up       recall oollddeerr strings for re-editing
              Down     recall nneewweerr strings or eerraassee entire line
              Insert   toggle between iinnsseerrtt and oovveerrttyyppee modes
              Delete   character rreemmoovveedd at cursor, moving others left
              Home     jump to bbeeggiinnnniinngg of input line
              End      jump to eenndd of input line

   LLiinnuuxx MMeemmoorryy TTyyppeess
       For  our purposes there are three types of memory, and one is optional.  First
       is physical memory, a limited resource where code and data  must  reside  when
       executed  or  referenced.   Next  is  the  optional  swap file, where modified
       (dirty) memory can be saved and later retrieved if too many demands  are  made
       on  physical  memory.   Lastly  we have virtual memory, a nearly unlimited re‐
       source serving the following goals:

          1. abstraction, free from physical memory addresses/limits
          2. isolation, every process in a separate address space
          3. sharing, a single mapping can serve multiple needs
          4. flexibility, assign a virtual address to a file

       Regardless of which of these forms memory may take, all are managed  as  pages
       (typically 4096 bytes) but expressed by default in top as KiB (kibibyte).  The
       memory discussed under topic `2c. MEMORY Usage' deals with physical memory and
       the  swap  file  for  the system as a whole.  The memory reviewed in topic `3.
       FIELDS / Columns Display' embraces all three memory types, but for  individual
       processes.

       For  each  such  process, every memory page is restricted to a single quadrant
       from the table below.  Both physical memory and virtual memory can include any
       of  the  four, while the swap file only includes #1 through #3.  The memory in
       quadrant #4, when modified, acts as its own dedicated swap file.

                                     PPrriivvaattee | SShhaarreedd
                                 11           |          22
            AAnnoonnyymmoouuss  . stack               |
                       . malloc()            |
                       . brk()/sbrk()        | . POSIX shm*
                       . mmap(PRIVATE, ANON) | . mmap(SHARED, ANON)
                      -----------------------+----------------------
                       . mmap(PRIVATE, fd)   | . mmap(SHARED, fd)
          FFiillee--bbaacckkeedd  . pgms/shared libs    |
                                 33           |          44

       The following may help in interpreting process level memory  values  displayed
       as scalable columns and discussed under topic `3a. DESCRIPTIONS of Fields'.

          %MEM - simply RES divided by total physical memory
          CODE - the `pgms' portion of quadrant 33
          DATA - the entire quadrant 11 portion of VIRT plus all
                 explicit mmap file-backed pages of quadrant 33
          RES  - anything occupying physical memory which, beginning with
                 Linux-4.5, is the sum of the following three fields:
                 RSan - quadrant 11 pages, which include any
                        former quadrant 33 pages if modified
                 RSfd - quadrant 33 and quadrant 44 pages
                 RSsh - quadrant 22 pages
          RSlk - subset of RES which cannot be swapped out (any quadrant)
          SHR  - subset of RES (excludes 11, includes all 22 & 44, some 33)
          SWAP - potentially any quadrant except 44
          USED - simply the sum of RES and SWAP
          VIRT - everything in-use and/or reserved (all quadrants)

       NNoottee:  Even  though program images and shared libraries are considered _p_r_i_v_a_t_e
       to a process, they will be accounted for as _s_h_a_r_e_d (SHR) by the kernel.

11.. CCOOMMMMAANNDD--LLIINNEE OOppttiioonnss
       The command-line syntax for top consists of:

         -hhvv|-bbccEEHHiiOOSSss11 -dd secs -nn max -uu|UU user -pp pid -oo fld -ww [cols]

       The typically mandatory switch (`-') and even whitespace  are  completely  op‐
       tional.

       -hh | -vv  :_H_e_l_p_/_V_e_r_s_i_o_n
            Show library version and the usage prompt, then quit.

       -bb  :_B_a_t_c_h_-_m_o_d_e operation
            Starts  top  in Batch mode, which could be useful for sending output from
            top to other programs or to a file.  In this mode, top  will  not  accept
            input  and  runs until the iterations limit you've set with the `-n' com‐
            mand-line option or until killed.

       -cc  :_C_o_m_m_a_n_d_-_l_i_n_e_/_P_r_o_g_r_a_m_-_n_a_m_e toggle
            Starts top with the last remembered `c' state reversed.  Thus, if top was
            displaying  command  lines,  now  that field will show program names, and
            vice versa.  See the `c' interactive command for additional information.

       -dd  :_D_e_l_a_y_-_t_i_m_e interval as:  --dd ssss..tt (_s_e_c_s._t_e_n_t_h_s)
            Specifies the delay between screen updates, and overrides the correspond‐
            ing  value  in  one's personal configuration file or the startup default.
            Later this can be changed with the `d' or `s' interactive commands.

            Fractional seconds are honored, but a negative number is not allowed.  In
            all  cases, however, such changes are prohibited if top is running in Se‐
            cure mode, except for root (unless the `s' command-line option was used).
            For  additional  information on Secure mode see topic 6d. SYSTEM Restric‐
            tions File.

       -EE  :_E_x_t_e_n_d_-_M_e_m_o_r_y_-_S_c_a_l_i_n_g as:  --EE  kk | mm | gg | tt | pp | ee
            Instructs top to force summary area memory to be scaled as:
               k - kibibytes
               m - mebibytes
               g - gibibytes
               t - tebibytes
               p - pebibytes
               e - exbibytes

            Later this can be changed with the `E' command toggle.

       -HH  :_T_h_r_e_a_d_s_-_m_o_d_e operation
            Instructs top to display individual threads.  Without  this  command-line
            option  a  summation of all threads in each process is shown.  Later this
            can be changed with the `H' interactive command.

       -ii  :_I_d_l_e_-_p_r_o_c_e_s_s toggle
            Starts top with the last remembered `i' state reversed.  When this toggle
            is  _O_f_f,  tasks that have not used any CPU since the last update will not
            be displayed.  For additional information regarding this toggle see topic
            4c. TASK AREA Commands, SIZE.

       -nn  :_N_u_m_b_e_r_-_o_f_-_i_t_e_r_a_t_i_o_n_s limit as:  --nn nnuummbbeerr
            Specifies the maximum number of iterations, or frames, top should produce
            before ending.

       -oo  :_O_v_e_r_r_i_d_e_-_s_o_r_t_-_f_i_e_l_d as:  --oo ffiieellddnnaammee
            Specifies the name of the field on which tasks will be  sorted,  indepen‐
            dent  of  what is reflected in the configuration file.  You can prepend a
            `+' or `-' to the field name to also  override  the  sort  direction.   A
            leading  `+'  will force sorting high to low, whereas a `-' will ensure a
            low to high ordering.

            This option exists primarily to support automated/scripted batch mode op‐
            eration.

       -OO  :_O_u_t_p_u_t_-_f_i_e_l_d_-_n_a_m_e_s
            This  option  acts  as  a  form of help for the above -o option.  It will
            cause top to print each of the available field names on a separate  line,
            then  quit.   Such  names  are subject to NLS (National Language Support)
            translation.

       -pp  :_M_o_n_i_t_o_r_-_P_I_D_s mode as:  --ppNN11 --ppNN22 ......  or  --ppNN11,,NN22,,NN33 ......
            Monitor only processes with specified process IDs.  This  option  can  be
            given  up  to 20 times, or you can provide a comma delimited list with up
            to 20 pids.  Co-mingling both approaches is permitted.

            A pid value of zero will be treated as the process id of the top  program
            itself once it is running.

            This  is a command-line option only and should you wish to return to nor‐
            mal operation, it is not necessary to quit and restart top  --  just  is‐
            sue any of these interactive commands: `=', `u' or `U'.

            The `p', `u' and `U' command-line options are mutually exclusive.

       -ss  :_S_e_c_u_r_e_-_m_o_d_e operation
            Starts top with secure mode forced, even for root.  This mode is far bet‐
            ter controlled through a system configuration file (see topic 6. FILES).

       -SS  :_C_u_m_u_l_a_t_i_v_e_-_t_i_m_e toggle
            Starts top with the last remembered `S' state reversed.  When  Cumulative
            time mode is _O_n, each process is listed with the cpu time that it and its
            dead children have used.  See the `S' interactive command for  additional
            information regarding this mode.

       -uu | -UU  :_U_s_e_r_-_f_i_l_t_e_r_-_m_o_d_e as:  --uu | --UU nnuummbbeerr or nnaammee
            Display  only  processes with a user id or user name matching that given.
            The `-u' option matches  on   _e_f_f_e_c_t_i_v_e  user  whereas  the  `-U'  option
            matches on _a_n_y user (real, effective, saved, or filesystem).

            Prepending  an  exclamation  point (`!') to the user id or name instructs
            top to display only processes with users not matching the one provided.

            The `p', `u' and `U' command-line options are mutually exclusive.

       -ww  :_O_u_t_p_u_t_-_w_i_d_t_h_-_o_v_e_r_r_i_d_e as:  --ww [ nnuummbbeerr ]
            In Batch mode, when used without an argument top will format output using
            the  COLUMNS= and LINES= environment variables, if set.  Otherwise, width
            will be fixed at the maximum 512 columns.  With an argument, output width
            can  be decreased or increased (up to 512) but the number of rows is con‐
            sidered unlimited.

            In normal display mode, when used without an argument top will _a_t_t_e_m_p_t to
            format  output  using  the  COLUMNS= and LINES= environment variables, if
            set.  With an argument, output width  can  only  be  decreased,  not  in‐
            creased.   Whether  using  environment  variables or an argument with -w,
            when _n_o_t in Batch mode actual terminal dimensions can never be exceeded.

            NNoottee: Without the use of this command-line option, output width is always
            based  on  the  terminal at which top was invoked whether or not in Batch
            mode.

       -11  :_S_i_n_g_l_e_/_S_e_p_a_r_a_t_e_-_C_p_u_-_S_t_a_t_e_s toggle
            Starts top with the last remembered Cpu States  portion  of  the  summary
            area  reversed.  Either all cpu information will be displayed in a single
            line or each cpu will be displayed separately, depending on the state  of
            the NUMA Node command toggle ('2').

            See the `1' and '2' interactive commands for additional information.

22.. SSUUMMMMAARRYY DDiissppllaayy
       Each  of  the following three areas are individually controlled through one or
       more interactive commands.  See topic 4b. SUMMARY AREA Commands for additional
       information regarding these provisions.

   22aa.. UUPPTTIIMMEE aanndd LLOOAADD AAvveerraaggeess
       This portion consists of a single line containing:
           pprrooggrraamm or wwiinnddooww name, depending on display mode
           current time and length of time since last boot
           total number of users
           system load avg over the last 1, 5 and 15 minutes

   22bb.. TTAASSKK aanndd CCPPUU SSttaatteess
       This portion consists of a minimum of two lines.  In an SMP environment, addi‐
       tional lines can reflect individual CPU state percentages.

       Line 1 shows total ttaasskkss or tthhrreeaaddss, depending on the state  of  the  Threads-
       mode toggle.  That total is further classified as:
           running; sleeping; stopped; zombie

       Line  2  shows  CPU state percentages based on the interval since the last re‐
       fresh.

       As a default, percentages  for  these  individual  categories  are  displayed.
       Where  two  labels  are shown below, those for more recent kernel versions are
       shown first.
           uuss, uusseerr    : time running un-niced user processes
           ssyy, ssyysstteemm  : time running kernel processes
           nnii, nniiccee    : time running niced user processes
           iidd, iiddllee    : time spent in the kernel idle handler
           wwaa, IIOO--wwaaiitt : time waiting for I/O completion
           hhii : time spent servicing hardware interrupts
           ssii : time spent servicing software interrupts
           sstt : time stolen from this vm by the hypervisor

       In the alternate cpu states display  modes,  beyond  the  first  tasks/threads
       line, an abbreviated summary is shown consisting of these elements:
                      a    b     c    d
           %Cpu(s):  7755..00/25.0  110000[ ...

       Where: a) is the combined uuss and nnii percentage; b) is the ssyy percentage; c) is
       the total; and d) is one of two visual graphs of those  representations.   See
       topic 4b. SUMMARY AREA Commands and the `t' command for additional information
       on that special 4-way toggle.

   22cc.. MMEEMMOORRYY UUssaaggee
       This portion consists of two lines which may express values in kibibytes (KiB)
       through  exbibytes (EiB) depending on the scaling factor enforced with the `E'
       interactive command.

       As a default, Line 1 reflects physical memory, classified as:
           total, free, used and buff/cache

       Line 2 reflects mostly virtual memory, classified as:
           total, free, used and avail (which is physical memory)

       The aavvaaiill number on line 2 is an estimation of physical memory  available  for
       starting  new  applications,  without swapping.  Unlike the ffrreeee field, it at‐
       tempts to account for readily reclaimable page cache and memory slabs.  It  is
       available  on kernels 3.14, emulated on kernels 2.6.27+, otherwise the same as
       ffrreeee.

       In the alternate memory display modes, two abbreviated summary lines are shown
       consisting of these elements:
                      a    b          c
           GiB Mem : 1188..77/15.738   [ ...
           GiB Swap:  00..00/7.999    [ ...

       Where:  a) is the percentage used; b) is the total available; and c) is one of
       two visual graphs of those representations.

       In the case of physical memory, the percentage represents the ttoottaall minus  the
       estimated  aavvaaiill  noted above.  The `Mem' graph itself is divided between uusseedd
       and any remaining memory not otherwise accounted for by aavvaaiill.  See topic  4b.
       SUMMARY  AREA  Commands and the `m' command for additional information on that
       special 4-way toggle.

       This table may help in interpreting the scaled values displayed:
           KiB = kibibyte = 1024 bytes
           MiB = mebibyte = 1024 KiB = 1,048,576 bytes
           GiB = gibibyte = 1024 MiB = 1,073,741,824 bytes
           TiB = tebibyte = 1024 GiB = 1,099,511,627,776 bytes
           PiB = pebibyte = 1024 TiB = 1,125,899,906,842,624 bytes
           EiB = exbibyte = 1024 PiB = 1,152,921,504,606,846,976 bytes

33.. FFIIEELLDDSS // CCoolluummnnss
   33aa.. DDEESSCCRRIIPPTTIIOONNSS ooff FFiieellddss
       Listed below are top's available process fields (columns).  They are shown  in
       strict ascii alphabetical order.  You may customize their position and whether
       or not they are displayable with the `f' or `F' (Fields  Management)  interac‐
       tive commands.

       Any  field  is  selectable as the sort field, and you control whether they are
       sorted high-to-low or low-to-high.  For additional information on sort  provi‐
       sions see topic 4c. TASK AREA Commands, SORTING.

       The  fields  related  to  physical  memory or virtual memory reference `(KiB)'
       which is the unsuffixed display mode.  Such fields  may,  however,  be  scaled
       from KiB through PiB.  That scaling is influenced via the `e' interactive com‐
       mand or established for startup through a build option.

        1. %%CCPPUU  --  CPU Usage
           The task's share of the elapsed CPU time since the last screen update, ex‐
           pressed as a percentage of total CPU time.

           In  a  true SMP environment, if a process is multi-threaded and top is _n_o_t
           operating in Threads mode, amounts greater than 100% may be reported.  You
           toggle Threads mode with the `H' interactive command.

           Also for multi-processor environments, if Irix mode is _O_f_f, top will oper‐
           ate in Solaris mode where a task's cpu usage will be divided by the  total
           number  of  CPUs.   You toggle Irix/Solaris modes with the `I' interactive
           command.

           NNoottee: When running in forest  view  mode  (`V')  with  children  collapsed
           (`v'), this field will also include the CPU time of those unseen children.
           See topic 4c. TASK AREA Commands, CONTENT for more  information  regarding
           the `V' and `v' toggles.

        2. %%MMEEMM  --  Memory Usage (RES)
           A task's currently resident share of available physical memory.

           See `OVERVIEW, Linux Memory Types' for additional details.

        3. CCGGNNAAMMEE  --  Control Group Name
           The  name  of  the control group to which a process belongs, or `-' if not
           applicable for that process.

           This will typically be the last entry in the full list of  control  groups
           as  shown  under  the  next heading (CGROUPS).  And as is true there, this
           field is also variable width.

        4. CCGGRROOUUPPSS  --  Control Groups
           The names of the control group(s) to which a process belongs,  or  `-'  if
           not applicable for that process.

           Control  Groups  provide  for  allocating  resources (cpu, memory, network
           bandwidth, etc.) among installation-defined groups of processes.  They en‐
           able fine-grained control over allocating, denying, prioritizing, managing
           and monitoring those resources.

           Many different hierarchies of cgroups can exist simultaneously on a system
           and  each  hierarchy  is  attached to one or more subsystems.  A subsystem
           represents a single resource.

           NNoottee: The CGROUPS field, unlike most columns, is  not  fixed-width.   When
           displayed,  it plus any other variable width columns will be allocated all
           remaining screen width (up to the maximum 512 characters).  Even so,  such
           variable  width  fields  could  still  suffer  truncation.   See topic 5c.
           SCROLLING a Window for additional information on accessing  any  truncated
           data.

        5. CCOODDEE  --  Code Size (KiB)
           The  amount  of physical memory currently devoted to executable code, also
           known as the Text Resident Set size or TRS.

           See `OVERVIEW, Linux Memory Types' for additional details.

        6. CCOOMMMMAANNDD  --  Command NNaammee or Command LLiinnee
           Display the command line used to start a task or the name of  the  associ‐
           ated program.  You toggle between command _l_i_n_e and _n_a_m_e with `c', which is
           both a command-line option and an interactive command.

           When you've chosen to display command lines, processes without  a  command
           line  (like  kernel  threads)  will be shown with only the program name in
           brackets, as in this example:
               [kthreadd]

           This field may also be impacted by the forest view display mode.  See  the
           `V' interactive command for additional information regarding that mode.

           NNoottee:  The  COMMAND  field, unlike most columns, is not fixed-width.  When
           displayed, it plus any other variable width columns will be allocated  all
           remaining  screen width (up to the maximum 512 characters).  Even so, such
           variable width fields could still suffer truncation.  This  is  especially
           true for this field when command lines are being displayed (the `c' inter‐
           active command.)  See topic 5c. SCROLLING a Window for additional informa‐
           tion on accessing any truncated data.

        7. DDAATTAA  --  Data + Stack Size (KiB)
           The  amount  of private memory _r_e_s_e_r_v_e_d by a process.  It is also known as
           the Data Resident Set or DRS.  Such memory may not yet be mapped to physi‐
           cal  memory (RES) but will always be included in the virtual memory (VIRT)
           amount.

           See `OVERVIEW, Linux Memory Types' for additional details.

        8. EENNVVIIRROONN  --  Environment variables
           Display all of the environment variables, if any, as seen by  the  respec‐
           tive processes.  These variables will be displayed in their raw native or‐
           der, not the sorted order you are accustomed to seeing with an unqualified
           `set'.

           NNoottee:  The  ENVIRON  field, unlike most columns, is not fixed-width.  When
           displayed, it plus any other variable width columns will be allocated  all
           remaining  screen width (up to the maximum 512 characters).  Even so, such
           variable width fields could still suffer truncation.  This  is  especially
           true  for this field.  See topic 5c. SCROLLING a Window for additional in‐
           formation on accessing any truncated data.

        9. FFllaaggss  --  Task Flags
           This column represents the task's current scheduling flags which  are  ex‐
           pressed  in  hexadecimal  notation and with zeros suppressed.  These flags
           are officially documented in <linux/sched.h>.

       10. GGIIDD  --  Group Id
           The _e_f_f_e_c_t_i_v_e group ID.

       11. GGRROOUUPP  --  Group Name
           The _e_f_f_e_c_t_i_v_e group name.

       12. LLXXCC  --  Lxc Container Name
           The name of the lxc container within  which  a  task  is  running.   If  a
           process is not running inside a container, a dash (`-') will be shown.

       13. NNII  --  Nice Value
           The  nice value of the task.  A negative nice value means higher priority,
           whereas a positive nice value means lower priority.  Zero  in  this  field
           simply  means  priority  will not be adjusted in determining a task's dis‐
           patch-ability.

       14. NNUU  --  Last known NUMA node
           A number representing the NUMA node associated with the last used  proces‐
           sor  (`P').   When  -1  is displayed it means that NUMA information is not
           available.

           See the `'2' and `3' interactive commands for additional  NUMA  provisions
           affecting the summary area.

       15. OOOOMMaa  --  Out of Memory Adjustment Factor
           The value, ranging from -1000 to +1000, added to the current out of memory
           score (OOMs) which is then used to determine which task to kill when  mem‐
           ory is exhausted.

       16. OOOOMMss  --  Out of Memory Score
           The  value,  ranging  from 0 to +1000, used to select task(s) to kill when
           memory is exhausted.  Zero translates to `never kill' whereas  1000  means
           `always kill'.

       17. PP  --  Last used CPU (SMP)
           A  number representing the last used processor.  In a true SMP environment
           this will likely change frequently since  the  kernel  intentionally  uses
           weak  affinity.   Also,  the  very  act of running top may break this weak
           affinity and cause more processes to change CPUs more  often  (because  of
           the extra demand for cpu time).

       18. PPGGRRPP  --  Process Group Id
           Every  process  is member of a unique process group which is used for dis‐
           tribution of signals and by terminals to arbitrate requests for their  in‐
           put  and  output.  When a process is created (forked), it becomes a member
           of the process group of its parent.  By convention, this value equals  the
           process  ID  (see  PID) of the first member of a process group, called the
           process group leader.

       19. PPIIDD  --  Process Id
           The task's unique process  ID,  which  periodically  wraps,  though  never
           restarting  at zero.  In kernel terms, it is a dispatchable entity defined
           by a task_struct.

           This value may also be used as: a process group ID (see PGRP);  a  session
           ID  for  the  session  leader  (see SID); a thread group ID for the thread
           group leader (see TGID); and a TTY process group ID for the process  group
           leader (see TPGID).

       20. PPPPIIDD  --  Parent Process Id
           The process ID (pid) of a task's parent.

       21. PPRR  --  Priority
           The  scheduling  priority  of the task.  If you see `rt' in this field, it
           means the task is running under real time scheduling priority.

           Under linux, real time priority is somewhat misleading since traditionally
           the operating itself was not preemptible.  And while the 2.6 kernel can be
           made mostly preemptible, it is not always so.

       22. RREESS  --  Resident Memory Size (KiB)
           A subset of the virtual address space (VIRT) representing the  non-swapped
           physical  memory  a  task  is  currently using.  It is also the sum of the
           RSan, RSfd and RSsh fields.

           It can include private anonymous pages, private pages mapped to files (in‐
           cluding  program images and shared libraries) plus shared anonymous pages.
           All such memory is backed by the swap file  represented  separately  under
           SWAP.

           Lastly,  this  field may also include shared file-backed pages which, when
           modified, act as a dedicated swap file and thus will never impact SWAP.

           See `OVERVIEW, Linux Memory Types' for additional details.

       23. RRSSaann  --  Resident Anonymous Memory Size (KiB)
           A subset of resident memory (RES) representing private pages not mapped to
           a file.

       24. RRSSffdd  --  Resident File-Backed Memory Size (KiB)
           A subset of resident memory (RES) representing the implicitly shared pages
           supporting program images and shared libraries.  It also includes explicit
           file mappings, both private and shared.

       25. RRSSllkk  --  Resident Locked Memory Size (KiB)
           A subset of resident memory (RES) which cannot be swapped out.

       26. RRSSsshh  --  Resident Shared Memory Size (KiB)
           A  subset  of  resident  memory  (RES)  representing the explicitly shared
           anonymous shm*/mmap pages.

       27. RRUUIIDD  --  Real User Id
           The _r_e_a_l user ID.

       28. RRUUSSEERR  --  Real User Name
           The _r_e_a_l user name.

       29. SS  --  Process Status
           The status of the task which can be one of:
               DD = uninterruptible sleep
               II = idle
               RR = running
               SS = sleeping
               TT = stopped by job control signal
               tt = stopped by debugger during trace
               ZZ = zombie

           Tasks shown as running should be more properly thought of as ready to  run
            --  their task_struct is simply represented on the Linux run-queue.  Even
           without a true SMP machine, you may see numerous tasks in this  state  de‐
           pending on top's delay interval and nice value.

       30. SSHHRR  --  Shared Memory Size (KiB)
           A subset of resident memory (RES) that may be used by other processes.  It
           will include shared anonymous pages and shared file-backed pages.  It also
           includes  private  pages  mapped  to files representing program images and
           shared libraries.

           See `OVERVIEW, Linux Memory Types' for additional details.

       31. SSIIDD  --  Session Id
           A session is a collection of process groups  (see  PGRP),  usually  estab‐
           lished  by  the  login shell.  A newly forked process joins the session of
           its creator.  By convention, this value equals the process ID (see PID) of
           the  first member of the session, called the session leader, which is usu‐
           ally the login shell.

       32. SSUUIIDD  --  Saved User Id
           The _s_a_v_e_d user ID.

       33. SSUUPPGGIIDDSS  --  Supplementary Group IDs
           The IDs of any supplementary group(s) established at  login  or  inherited
           from a task's parent.  They are displayed in a comma delimited list.

           NNoottee:  The  SUPGIDS  field, unlike most columns, is not fixed-width.  When
           displayed, it plus any other variable width columns will be allocated  all
           remaining  screen width (up to the maximum 512 characters).  Even so, such
           variable width fields  could  still  suffer  truncation.   See  topic  5c.
           SCROLLING  a  Window for additional information on accessing any truncated
           data.

       34. SSUUPPGGRRPPSS  --  Supplementary Group Names
           The names of any supplementary group(s) established at login or  inherited
           from a task's parent.  They are displayed in a comma delimited list.

           NNoottee:  The  SUPGRPS  field, unlike most columns, is not fixed-width.  When
           displayed, it plus any other variable width columns will be allocated  all
           remaining  screen width (up to the maximum 512 characters).  Even so, such
           variable width fields  could  still  suffer  truncation.   See  topic  5c.
           SCROLLING  a  Window for additional information on accessing any truncated
           data.

       35. SSUUSSEERR  --  Saved User Name
           The _s_a_v_e_d user name.

       36. SSWWAAPP  --  Swapped Size (KiB)
           The formerly resident portion of a task's address  space  written  to  the
           swap file when physical memory becomes over committed.

           See `OVERVIEW, Linux Memory Types' for additional details.

       37. TTGGIIDD  --  Thread Group Id
           The  ID of the thread group to which a task belongs.  It is the PID of the
           thread group leader.  In kernel terms,  it  represents  those  tasks  that
           share an mm_struct.

       38. TTIIMMEE  --  CPU Time
           Total  CPU  time the task has used since it started.  When Cumulative mode
           is _O_n, each process is listed with the cpu time that it and its dead chil‐
           dren have used.  You toggle Cumulative mode with `S', which is both a com‐
           mand-line option and an interactive command.  See the `S' interactive com‐
           mand for additional information regarding this mode.

       39. TTIIMMEE++  --  CPU Time, hundredths
           The  same as TIME, but reflecting more granularity through hundredths of a
           second.

       40. TTPPGGIIDD  --  Tty Process Group Id
           The process group ID of the foreground process for the connected  tty,  or
           -1 if a process is not connected to a terminal.  By convention, this value
           equals the process ID (see PID) of the process group leader (see PGRP).

       41. TTTTYY  --  Controlling Tty
           The name of the controlling terminal.  This is usually the device  (serial
           port, pty, etc.) from which the process was started, and which it uses for
           input or output.  However, a task need not be associated with a  terminal,
           in which case you'll see `?' displayed.

       42. UUIIDD  --  User Id
           The _e_f_f_e_c_t_i_v_e user ID of the task's owner.

       43. UUSSEEDD  --  Memory in Use (KiB)
           This  field  represents  the  non-swapped  physical memory a task is using
           (RES) plus the swapped out portion of its address space (SWAP).

           See `OVERVIEW, Linux Memory Types' for additional details.

       44. UUSSEERR  --  User Name
           The _e_f_f_e_c_t_i_v_e user name of the task's owner.

       45. VVIIRRTT  --  Virtual Memory Size (KiB)
           The total amount of virtual memory used by  the  task.   It  includes  all
           code,  data and shared libraries plus pages that have been swapped out and
           pages that have been mapped but not used.

           See `OVERVIEW, Linux Memory Types' for additional details.

       46. WWCCHHAANN  --  Sleeping in Function
           This field will show the name of the kernel function in which the task  is
           currently  sleeping.  Running tasks will display a dash (`-') in this col‐
           umn.

       47. nnDDRRTT  --  Dirty Pages Count
           The number of pages that have been modified since they were  last  written
           to  auxiliary  storage.   Dirty pages must be written to auxiliary storage
           before the corresponding physical memory location can  be  used  for  some
           other virtual page.

           This field was deprecated with linux 2.6 and is always zero.

       48. nnMMaajj  --  Major Page Fault Count
           The  number  of  mmaajjoorr  page faults that have occurred for a task.  A page
           fault occurs when a process attempts to read from or write  to  a  virtual
           page  that  is  not  currently present in its address space.  A major page
           fault is when auxiliary storage access is involved  in  making  that  page
           available.

       49. nnMMiinn  --  Minor Page Fault count
           The  number  of  mmiinnoorr  page faults that have occurred for a task.  A page
           fault occurs when a process attempts to read from or write  to  a  virtual
           page  that  is  not  currently present in its address space.  A minor page
           fault does not involve auxiliary storage access in making that page avail‐
           able.

       50. nnTTHH  --  Number of Threads
           The number of threads associated with a process.

       51. nnssIIPPCC  --  IPC namespace
           The  Inode  of  the  namespace  used to isolate interprocess communication
           (IPC) resources such as System V IPC objects and POSIX message queues.

       52. nnssMMNNTT  --  MNT namespace
           The Inode of the namespace used to isolate filesystem  mount  points  thus
           offering different views of the filesystem hierarchy.

       53. nnssNNEETT  --  NET namespace
           The  Inode  of the namespace used to isolate resources such as network de‐
           vices, IP addresses, IP routing, port numbers, etc.

       54. nnssPPIIDD  --  PID namespace
           The Inode of the namespace used to isolate process ID numbers meaning they
           need  not  remain  unique.   Thus,  each such namespace could have its own
           `init/systemd' (PID #1) to manage various initialization  tasks  and  reap
           orphaned child processes.

       55. nnssUUSSEERR  --  USER namespace
           The  Inode of the namespace used to isolate the user and group ID numbers.
           Thus, a process could have a normal unprivileged user ID  outside  a  user
           namespace  while  having a user ID of 0, with full root privileges, inside
           that namespace.

       56. nnssUUTTSS  --  UTS namespace
           The Inode of the namespace used to isolate hostname and NIS  domain  name.
           UTS simply means "UNIX Time-sharing System".

       57. vvMMjj  --  Major Page Fault Count Delta
           The  number  of mmaajjoorr page faults that have occurred since the last update
           (see nMaj).

       58. vvMMnn  --  Minor Page Fault Count Delta
           The number of mmiinnoorr page faults that have occurred since the  last  update
           (see nMin).

   33bb.. MMAANNAAGGIINNGG FFiieellddss
       After pressing the interactive command `f' or `F' (Fields Management) you will
       be presented with a screen showing: 1) the `current' window name; 2) the  des‐
       ignated  sort  field; 3) all fields in their current order along with descrip‐
       tions.  Entries marked with an asterisk are the  currently  displayed  fields,
       screen width permitting.

           •  As  the  on screen instructions indicate, you navigate among the fields
              with the UUpp and DDoowwnn arrow keys.  The PgUp, PgDn, Home and End keys can
              also be used to quickly reach the first or last available field.

           •  The  RRiigghhtt arrow key selects a field for repositioning and the LLeefftt ar‐
              row key or the <EEnntteerr> key commits that field's placement.

           •  The `dd' key or the <SSppaaccee> bar toggles a field's  display  status,  and
              thus the presence or absence of the asterisk.

           •  The  `ss'  key designates a field as the sort field.  See topic 4c. TASK
              AREA Commands, SORTING for additional information regarding your selec‐
              tion of a sort field.

           •  The `aa' and `ww' keys can be used to cycle through all available windows
              and the `qq' or <EEsscc> keys exit Fields Management.

       The Fields Management screen can also be used to  change  the  `current'  win‐
       dow/field  group  in either full-screen mode or alternate-display mode.  What‐
       ever was targeted when `q' or <Esc> was pressed will be made  current  as  you
       return  to the top display.  See topic 5. ALTERNATE-DISPLAY Provisions and the
       `g' interactive command for insight into `current' windows and field groups.

       NNoottee: Any window that has been scrolled _h_o_r_i_z_o_n_t_a_l_l_y  will  be  reset  if  any
       field  changes  are  made  via  the  Fields  Management  screen.  Any _v_e_r_t_i_c_a_l
       scrolled position, however, will not be affected.  See topic 5c.  SCROLLING  a
       Window for additional information regarding vertical and horizontal scrolling.

44.. IINNTTEERRAACCTTIIVVEE CCoommmmaannddss
       Listed  below  is  a brief index of commands within categories.  Some commands
       appear more than once  --  their meaning or scope may vary  depending  on  the
       context in which they are issued.

         4a. _G_l_o_b_a_l_-_C_o_m_m_a_n_d_s
               <Ent/Sp> ?, =, 0,
               A, B, d, E, e, g, h, H, I, k, q, r, s, W, X, Y, Z
         4b. _S_u_m_m_a_r_y_-_A_r_e_a_-_C_o_m_m_a_n_d_s
               C, l, t, m, 1, 2, 3
         4c. _T_a_s_k_-_A_r_e_a_-_C_o_m_m_a_n_d_s
               Appearance:  b, J, j, x, y, z
               Content:     c, f, F, o, O, S, u, U, V, v
               Size:        #, i, n
               Sorting:     <, >, f, F, R
         4d. _C_o_l_o_r_-_M_a_p_p_i_n_g
               <Ret>, a, B, b, H, M, q, S, T, w, z, 0 - 7
         5b. _C_o_m_m_a_n_d_s_-_f_o_r_-_W_i_n_d_o_w_s
               -, _, =, +, A, a, g, G, w
         5c. _S_c_r_o_l_l_i_n_g_-_a_-_W_i_n_d_o_w
               C, Up, Dn, Left, Right, PgUp, PgDn, Home, End
         5d. _S_e_a_r_c_h_i_n_g_-_i_n_-_a_-_W_i_n_d_o_w
               L, &

   44aa.. GGLLOOBBAALL CCoommmmaannddss
       The  global interactive commands are aallwwaayyss available in both full-screen mode
       and alternate-display mode.  However, some of these interactive  commands  are
       nnoott aavvaaiillaabbllee when running in Secure mode.

       If  you wish to know in advance whether or not your top has been secured, sim‐
       ply ask for help and view the system summary on the second line.

         <EEnntteerr> or <SSppaaccee>  :_R_e_f_r_e_s_h_-_D_i_s_p_l_a_y
              These commands awaken top and following receipt of any input the entire
              display will be repainted.  They also force an update of any hotplugged
              cpu or physical memory changes.

              Use either of these keys if you have a large delay interval and wish to
              see current status,

          ?? | hh  :_H_e_l_p
              There are two help levels available.  The first will provide a reminder
              of all the basic interactive commands.  If top is _s_e_c_u_r_e_d, that  screen
              will be abbreviated.

              Typing  `h'  or `?' on that help screen will take you to help for those
              interactive commands applicable to alternate-display mode.

          ==  :_E_x_i_t_-_T_a_s_k_-_L_i_m_i_t_s
              Removes restrictions on which tasks are shown.  This command  will  re‐
              verse  any  `i'  (idle  tasks), `n' (max tasks) and `v' (hide children)
              commands that might be active.  It also provides for an exit  from  PID
              monitoring, User filtering, Other filtering and Locate processing.

              Additionally,  if  the  window  has been scrolled it will be reset with
              this command.

          00  :_Z_e_r_o_-_S_u_p_p_r_e_s_s toggle
              This command determines whether zeros are shown or suppressed for  many
              of  the fields in a task window.  Fields like UID, GID, NI, PR or P are
              not affected by this toggle.

          AA  :_A_l_t_e_r_n_a_t_e_-_D_i_s_p_l_a_y_-_M_o_d_e toggle
              This command will switch between full-screen mode and alternate-display
              mode.   See  topic 5. ALTERNATE-DISPLAY Provisions and the `g' interac‐
              tive command for insight into `current' windows and field groups.

          BB  :_B_o_l_d_-_D_i_s_a_b_l_e_/_E_n_a_b_l_e toggle
              This command will influence use of the bold terminfo capability and al‐
              ters  bbootthh  the  summary  area  and task area for the `current' window.
              While it is intended primarily for use with dumb terminals, it  can  be
              applied anytime.

              NNoottee:  When  this toggle is _O_n and top is operating in monochrome mode,
              the eennttiirree ddiissppllaayy will appear as normal text.  Thus,  unless  the  `x'
              and/or  `y'  toggles  are  using reverse for emphasis, there will be no
              visual confirmation that they are even on.

       *  dd | ss  :_C_h_a_n_g_e_-_D_e_l_a_y_-_T_i_m_e_-_i_n_t_e_r_v_a_l
              You will be prompted to enter the delay time, in seconds, between  dis‐
              play updates.

              Fractional  seconds  are honored, but a negative number is not allowed.
              Entering 0 causes (nearly) continuous updates, with  an  unsatisfactory
              display as the system and tty driver try to keep up with top's demands.
              The delay value is inversely proportional to system loading, so set  it
              with care.

              If  at any time you wish to know the current delay time, simply ask for
              help and view the system summary on the second line.

          EE  :_E_x_t_e_n_d_-_M_e_m_o_r_y_-_S_c_a_l_e in Summary Area
              With this command you can cycle through the available summary area mem‐
              ory  scaling  which  ranges from KiB (kibibytes or 1,024 bytes) through
              EiB (exbibytes or 1,152,921,504,606,846,976 bytes).

              If you see a `+' between a displayed number and the following label, it
              means  that top was forced to truncate some portion of that number.  By
              raising the scaling factor, such truncation can be avoided.

          ee  :_E_x_t_e_n_d_-_M_e_m_o_r_y_-_S_c_a_l_e in Task Windows
              With this command you can cycle through the available task window  mem‐
              ory  scaling  which  ranges from KiB (kibibytes or 1,024 bytes) through
              PiB (pebibytes or 1,125,899,906,842,624 bytes).

              While top will try to honor the selected target range, additional scal‐
              ing  might  still  be necessary in order to accommodate current values.
              If you wish to see a more homogeneous result  in  the  memory  columns,
              raising  the  scaling range will usually accomplish that goal.  Raising
              it too high, however, is likely to produce an  all  zero  result  which
              cannot be suppressed with the `0' interactive command.

          gg  :_C_h_o_o_s_e_-_A_n_o_t_h_e_r_-_W_i_n_d_o_w_/_F_i_e_l_d_-_G_r_o_u_p
              You  will be prompted to enter a number between 1 and 4 designating the
              field group which should be made the `current' window.  You  will  soon
              grow  comfortable  with these 4 windows, especially after experimenting
              with alternate-display mode.

          HH  :_T_h_r_e_a_d_s_-_m_o_d_e toggle
              When this toggle is _O_n, individual threads will be  displayed  for  all
              processes  in all visible task windows.  Otherwise, top displays a sum‐
              mation of all threads in each process.

          II  :_I_r_i_x_/_S_o_l_a_r_i_s_-_M_o_d_e toggle
              When operating in Solaris mode (`I' toggled _O_f_f), a  task's  cpu  usage
              will  be  divided by the total number of CPUs.  After issuing this com‐
              mand, you'll be told the new state of this toggle.

       *  kk  :_K_i_l_l_-_a_-_t_a_s_k
              You will be prompted for a PID and then the signal to send.

              Entering no PID or a negative number will be interpreted as the default
              shown  in  the  prompt (the first task displayed).  A PID value of zero
              means the top program itself.

              The default signal, as reflected in the prompt, is  SIGTERM.   However,
              you can send any signal, via number or name.

              If  you wish to abort the kill process, do one of the following depend‐
              ing on your progress:
                  1) at the pid prompt, type an invalid number
                  2) at the signal prompt, type 0 (or any invalid signal)
                  3) at any prompt, type <Esc>

          qq  :_Q_u_i_t

       *  rr  :_R_e_n_i_c_e_-_a_-_T_a_s_k
              You will be prompted for a PID and then the value to nice it to.

              Entering no PID or a negative number will be interpreted as the default
              shown  in  the  prompt (the first task displayed).  A PID value of zero
              means the top program itself.

              A positive nice value will cause a  process  to  lose  priority.   Con‐
              versely,  a  negative nice value will cause a process to be viewed more
              favorably by the kernel.  As a general rule, ordinary  users  can  only
              increase the nice value and are prevented from lowering it.

              If  you  wish  to abort the renice process, do one of the following de‐
              pending on your progress:
                  1) at the pid prompt, type an invalid number
                  2) at the nice prompt, type <Enter> with no input
                  3) at any prompt, type <Esc>

          WW  :_W_r_i_t_e_-_t_h_e_-_C_o_n_f_i_g_u_r_a_t_i_o_n_-_F_i_l_e
              This will save all of your options and toggles plus the current display
              mode and delay time.  By issuing this command just before quitting top,
              you will be able restart later in exactly that same state.

          XX  :_E_x_t_r_a_-_F_i_x_e_d_-_W_i_d_t_h
              Some fields are fixed width and not scalable.  As such, they  are  sub‐
              ject  to truncation which would be indicated by a `+' in the last posi‐
              tion.

              This interactive command can be used to alter the widths of the follow‐
              ing fields:

                  _f_i_e_l_d  _d_e_f_a_u_l_t    _f_i_e_l_d  _d_e_f_a_u_l_t    _f_i_e_l_d  _d_e_f_a_u_l_t
                  GID       5       GROUP     8       WCHAN    10
                  RUID      5       LXC       8       nsIPC    10
                  SUID      5       RUSER     8       nsMNT    10
                  UID       5       SUSER     8       nsNET    10
                                    TTY       8       nsPID    10
                                    USER      8       nsUSER   10
                                                      nsUTS    10

              You  will  be prompted for the amount to be added to the default widths
              shown above.  Entering zero forces a return to those defaults.

              If you enter a negative number, top  will  automatically  increase  the
              column  size  as needed until there is no more truncated data.  You can
              accelerate this process by reducing the delay interval or holding  down
              the <Space> bar.

              NNoottee:  Whether  explicitly  or  automatically increased, the widths for
              these fields are never decreased by top.  To narrow them you must spec‐
              ify a smaller number or restore the defaults.

          YY  :_I_n_s_p_e_c_t_-_O_t_h_e_r_-_O_u_t_p_u_t
              After  issuing  the `Y' interactive command, you will be prompted for a
              target PID.  Typing a value or accepting the default results in a sepa‐
              rate  screen.   That  screen  can be used to view a variety of files or
              piped command output while the normal top iterative display is paused.

              NNoottee: This interactive command is only fully realized  when  supporting
              entries  have  been  manually added to the end of the top configuration
              file.  For details on creating those entries, see topic 6b. ADDING  IN‐
              SPECT Entries.

              Most  of the keys used to navigate the Inspect feature are reflected in
              its header prologue.  There are,  however,  additional  keys  available
              once you have selected a particular file or command.  They are familiar
              to anyone who has used the pager `less' and are summarized here for fu‐
              ture reference.

                  _k_e_y      _f_u_n_c_t_i_o_n
                  =        alternate status-line, file or pipeline
                  /        find, equivalent to `L' locate
                  n        find next, equivalent to `&' locate next
                  <Space>  scroll down, equivalent to <PgDn>
                  b        scroll up, equivalent to <PgUp>
                  g        first line, equivalent to <Home>
                  G        last line, equivalent to <End>

          ZZ  :_C_h_a_n_g_e_-_C_o_l_o_r_-_M_a_p_p_i_n_g
              This  key  will  take you to a separate screen where you can change the
              colors for the `current' window, or for all windows.  For  details  re‐
              garding this interactive command see topic 4d. COLOR Mapping.

       *  The commands shown with an asterisk (`*') are not available in Secure mode,
          nor will they be shown on the level-1 help screen.

   44bb.. SSUUMMMMAARRYY AARREEAA CCoommmmaannddss
       The summary area interactive commands are aallwwaayyss aavvaaiillaabbllee in both full-screen
       mode and alternate-display mode.  They affect the beginning lines of your dis‐
       play and will determine the position of messages and prompts.

       These commands always impact just the `current' window/field group.  See topic
       5.  ALTERNATE-DISPLAY  Provisions  and the `g' interactive command for insight
       into `current' windows and field groups.

          CC  :_S_h_o_w_-_s_c_r_o_l_l_-_c_o_o_r_d_i_n_a_t_e_s toggle
              Toggle an informational message which is displayed whenever the message
              line is not otherwise being used.  For additional information see topic
              5c. SCROLLING a Window.

          ll  :_L_o_a_d_-_A_v_e_r_a_g_e_/_U_p_t_i_m_e toggle
              This is also the line containing the program name (possibly  an  alias)
              when  operating  in  full-screen mode or the `current' window name when
              operating in alternate-display mode.

          tt  :_T_a_s_k_/_C_p_u_-_S_t_a_t_e_s toggle
              This command affects from 2 to many summary area  lines,  depending  on
              the state of the `1', `2' or `3' command toggles and whether or not top
              is running under true SMP.

              This portion of the summary area is also influenced by the `H' interac‐
              tive command toggle, as reflected in the total label which shows either
              Tasks or Threads.

              This command serves as a 4-way toggle, cycling through these modes:
                  1. detailed percentages by category
                  2. abbreviated user/system and total % + bar graph
                  3. abbreviated user/system and total % + block graph
                  4. turn off task and cpu states display

              When operating in either of the graphic modes, the display becomes much
              more  meaningful when individual CPUs or NUMA nodes are also displayed.
              See the the `1', `2' and `3' commands below for additional information.

          mm  :_M_e_m_o_r_y_/_S_w_a_p_-_U_s_a_g_e toggle
              This command affects the two summary area lines dealing  with  physical
              and virtual memory.

              This command serves as a 4-way toggle, cycling through these modes:
                  1. detailed percentages by memory type
                  2. abbreviated % used/total available + bar graph
                  3. abbreviated % used/total available + block graph
                  4. turn off memory display

          11  :_S_i_n_g_l_e_/_S_e_p_a_r_a_t_e_-_C_p_u_-_S_t_a_t_e_s toggle
              This command affects how the `t' command's Cpu States portion is shown.
              Although this toggle exists primarily to serve  massively-parallel  SMP
              machines, it is not restricted to solely SMP environments.

              When  you  see `%Cpu(s):' in the summary area, the `1' toggle is _O_n and
              all cpu information is gathered in a single line.  Otherwise, each  cpu
              is displayed separately as: `%Cpu0, %Cpu1, ...'  up to available screen
              height.

          22  :_N_U_M_A_-_N_o_d_e_s_/_C_p_u_-_S_u_m_m_a_r_y toggle
              This command toggles between the `1' command cpu summary display (only)
              or  a summary display plus the cpu usage statistics for each NUMA Node.
              It is only available if a system has the requisite NUMA support.

          33  :_E_x_p_a_n_d_-_N_U_M_A_-_N_o_d_e
              You will be invited to enter a number representing a NUMA Node.  There‐
              after,  a  node  summary  plus the statistics for each cpu in that node
              will be shown until either the `1' or `2' command  toggle  is  pressed.
              This  interactive  command is only available if a system has the requi‐
              site NUMA support.

       NNoottee: If the entire summary area has been toggled  _O_f_f  for  any  window,  you
       would  be  left  with just the mmeessssaaggee lliinnee.  In that way, you will have maxi‐
       mized available task rows but (temporarily) sacrificed  the  program  name  in
       full-screen mode or the `current' window name when in alternate-display mode.

   44cc.. TTAASSKK AARREEAA CCoommmmaannddss
       The task area interactive commands are aallwwaayyss available in full-screen mode.

       The  task  area  interactive commands are nneevveerr aavvaaiillaabbllee in alternate-display
       mode _i_f the `current' window's task display has been toggled _O_f_f (see topic 5.
       ALTERNATE-DISPLAY Provisions).

       AAPPPPEEAARRAANNCCEE of task window

          JJ  :_J_u_s_t_i_f_y_-_N_u_m_e_r_i_c_-_C_o_l_u_m_n_s toggle
              Alternates between right-justified (the default) and left-justified nu‐
              meric data.  If the numeric data completely fills the available column,
              this command toggle may impact the column header only.

          jj  :_J_u_s_t_i_f_y_-_C_h_a_r_a_c_t_e_r_-_C_o_l_u_m_n_s toggle
              Alternates  between  left-justified  (the  default) and right-justified
              character data.  If the character data completely fills  the  available
              column, this command toggle may impact the column header only.

         The  following  commands  will also be influenced by the state of the global
         `B' (bold enable) toggle.

          bb  :_B_o_l_d_/_R_e_v_e_r_s_e toggle
              This command will impact how the `x' and `y' toggles are displayed.  It
              may also impact the summary area when a bar graph has been selected for
              cpu states or memory usage via the `t' or `m' toggles.

          xx  :_C_o_l_u_m_n_-_H_i_g_h_l_i_g_h_t toggle
              Changes highlighting for the current sort field.  If you  forget  which
              field  is  being  sorted  this  command can serve as a quick visual re‐
              minder, providing the sort field is being displayed.   The  sort  field
              might _n_o_t be visible because:
                  1) there is insufficient _S_c_r_e_e_n _W_i_d_t_h
                  2) the `f' interactive command turned it _O_f_f

              NNoottee:  Whenever Searching and/or Other Filtering is active in a window,
              column highlighting is temporarily disabled.  See the notes at the  end
              of topics 5d. SEARCHING and 5e. FILTERING for an explanation why.

          yy  :_R_o_w_-_H_i_g_h_l_i_g_h_t toggle
              Changes  highlighting for "running" tasks.  For additional insight into
              this task state, see topic 3a. DESCRIPTIONS of Fields,  the  `S'  field
              (Process Status).

              Use  of  this  provision  provides important insight into your system's
              health.  The only costs will be a few additional tty escape sequences.

          zz  :_C_o_l_o_r_/_M_o_n_o_c_h_r_o_m_e toggle
              Switches the `current' window between your last used color  scheme  and
              the  older form of black-on-white or white-on-black.  This command will
              alter bbootthh the summary area and task area but does not affect the state
              of the `x', `y' or `b' toggles.

       CCOONNTTEENNTT of task window

          cc  :_C_o_m_m_a_n_d_-_L_i_n_e_/_P_r_o_g_r_a_m_-_N_a_m_e toggle
              This  command will be honored whether or not the COMMAND column is cur‐
              rently visible.  Later, should that field come into  view,  the  change
              you applied will be seen.

          ff | FF  :_F_i_e_l_d_s_-_M_a_n_a_g_e_m_e_n_t
              These  keys display a separate screen where you can change which fields
              are displayed, their order and also designate the sort field.  For  ad‐
              ditional information on these interactive commands see topic 3b. MANAG‐
              ING Fields.

          oo | OO  :_O_t_h_e_r_-_F_i_l_t_e_r_i_n_g
              You will be prompted for the selection criteria which  then  determines
              which  tasks  will be shown in the `current' window.  Your criteria can
              be made case sensitive or case can be ignored.  And  you  determine  if
              top should include or exclude matching tasks.

              See topic 5e. FILTERING in a window for details on these and additional
              related interactive commands.

          SS  :_C_u_m_u_l_a_t_i_v_e_-_T_i_m_e_-_M_o_d_e toggle
              When Cumulative mode is _O_n, each process is listed with  the  cpu  time
              that it and its dead children have used.

              When  _O_f_f, programs that fork into many separate tasks will appear less
              demanding.  For programs like `init' or a shell this is appropriate but
              for others, like compilers, perhaps not.  Experiment with two task win‐
              dows sharing the same sort field but with different `S' states and  see
              which representation you prefer.

              After issuing this command, you'll be informed of the new state of this
              toggle.  If you wish to know in advance whether or not Cumulative  mode
              is  in  effect,  simply ask for help and view the window summary on the
              second line.

          uu | UU  :_S_h_o_w_-_S_p_e_c_i_f_i_c_-_U_s_e_r_-_O_n_l_y
              You will be prompted for the uuiidd or nnaammee of the user to  display.   The
              -u  option  matches on  eeffffeeccttiivvee user whereas the -U option matches on
              aannyy user (real, effective, saved, or filesystem).

              Thereafter, in that task window only matching users will be  shown,  or
              possibly  no  processes will be shown.  Prepending an exclamation point
              (`!') to the user id or name instructs top to  display  only  processes
              with users not matching the one provided.

              Different  task  windows can be used to filter different users.  Later,
              if you wish to monitor all users again in the `current' window,  re-is‐
              sue this command but just press <Enter> at the prompt.

          VV  :_F_o_r_e_s_t_-_V_i_e_w_-_M_o_d_e toggle
              In  this  mode,  processes are reordered according to their parents and
              the layout of the COMMAND column resembles that of a tree.   In  forest
              view  mode it is still possible to toggle between program name and com‐
              mand line (see the `c' interactive command) or  between  processes  and
              threads (see the `H' interactive command).

              NNoottee:  Typing  any  key  affecting the sort order will exit forest view
              mode in the `current' window.  See topic 4c. TASK AREA Commands,  SORT‐
              ING for information on those keys.

          vv  :_H_i_d_e_/_S_h_o_w_-_C_h_i_l_d_r_e_n toggle
              When  in  forest  view mode, this key serves as a toggle to collapse or
              expand the children of a parent.

              The toggle is applied against the first (topmost) process in the  `cur‐
              rent' window.  See topic 5c. SCROLLING a Window for additional informa‐
              tion regarding vertical scrolling.

              If the target process has not forked any children, this key has no  ef‐
              fect.  It also has no effect when not in forest view mode.

       SSIIZZEE of task window

          ii  :_I_d_l_e_-_P_r_o_c_e_s_s toggle
              Displays  all  tasks  or  just  active tasks.  When this toggle is _O_f_f,
              tasks that have not used any CPU since the last update will not be dis‐
              played.   However, due to the granularity of the %CPU and TIME+ fields,
              some processes may still be displayed that _a_p_p_e_a_r to have used _n_o CPU.

              If this command is applied to the last  task  display  when  in  alter‐
              nate-display  mode,  then  it will not affect the window's size, as all
              prior task displays will have already been painted.

          nn | ##  :_S_e_t_-_M_a_x_i_m_u_m_-_T_a_s_k_s
              You will be prompted to enter the number  of  tasks  to  display.   The
              lessor of your number and available screen rows will be used.

              When used in alternate-display mode, this is the command that gives you
              precise control over the size of each currently visible  task  display,
              except  for  the very last.  It will not affect the last window's size,
              as all prior task displays will have already been painted.

              NNoottee: If you wish to increase the size of the last visible task display
              when  in  alternate-display  mode, simply decrease the size of the task
              display(s) above it.

       SSOORRTTIINNGG of task window

          For compatibility, this top supports most of  the  former  top  sort  keys.
          Since  this  is  primarily a service to former top users, these commands do
          not appear on any help screen.
                _c_o_m_m_a_n_d   _s_o_r_t_e_d_-_f_i_e_l_d                  _s_u_p_p_o_r_t_e_d
                A         start time (non-display)      NNoo
                M         %MEM                          Yes
                N         PID                           Yes
                P         %CPU                          Yes
                T         TIME+                         Yes

          Before using any of the following sort provisions, top  suggests  that  you
          temporarily  turn on column highlighting using the `x' interactive command.
          That will help ensure that the actual sort environment matches your intent.

          The following interactive commands will oonnllyy be honored  when  the  current
          sort field is vviissiibbllee.  The sort field might _n_o_t be visible because:
                1) there is insufficient _S_c_r_e_e_n _W_i_d_t_h
                2) the `f' interactive command turned it _O_f_f

             <<  :_M_o_v_e_-_S_o_r_t_-_F_i_e_l_d_-_L_e_f_t
                 Moves  the  sort column to the left unless the current sort field is
                 the first field being displayed.

             >>  :_M_o_v_e_-_S_o_r_t_-_F_i_e_l_d_-_R_i_g_h_t
                 Moves the sort column to the right unless the current sort field  is
                 the last field being displayed.

          The  following  interactive  commands will aallwwaayyss be honored whether or not
          the current sort field is visible.

             ff | FF  :_F_i_e_l_d_s_-_M_a_n_a_g_e_m_e_n_t
                 These keys display a separate screen  where  you  can  change  which
                 field  is  used as the sort column, among other functions.  This can
                 be a convenient way to simply verify the current  sort  field,  when
                 running top with column highlighting turned _O_f_f.

             RR  :_R_e_v_e_r_s_e_/_N_o_r_m_a_l_-_S_o_r_t_-_F_i_e_l_d toggle
                 Using this interactive command you can alternate between high-to-low
                 and low-to-high sorts.

          NNoottee: Field sorting uses internal values,  not  those  in  column  display.
          Thus,  the  TTY  and  WCHAN  fields will violate strict ASCII collating se‐
          quence.

   44dd.. CCOOLLOORR MMaappppiinngg
       When you issue the `Z' interactive command, you will be presented with a sepa‐
       rate  screen.   That screen can be used to change the colors in just the `cur‐
       rent' window or in all four windows before returning to the top display.

       The following interactive commands are available.
           44 upper case letters to select a ttaarrggeett
           88 numbers to select a ccoolloorr
           normal toggles available
               B         :bold disable/enable
               b         :running tasks "bold"/reverse
               z         :color/mono
           other commands available
               a/w       :apply, then go to next/prior
               <Enter>   :apply and exit
               q         :abandon current changes and exit

       If you use `a' or `w' to cycle the targeted window, you will have applied  the
       color  scheme  that  was  displayed  when  you  left that window.  You can, of
       course, easily return to any window and reapply different colors or turn  col‐
       ors _O_f_f completely with the `z' toggle.

       The Color Mapping screen can also be used to change the `current' window/field
       group in either full-screen mode or alternate-display mode.  Whatever was tar‐
       geted  when  `q'  or <Enter> was pressed will be made current as you return to
       the top display.

55.. AALLTTEERRNNAATTEE--DDIISSPPLLAAYY PPrroovviissiioonnss
   55aa.. WWIINNDDOOWWSS OOvveerrvviieeww
       FFiieelldd GGrroouuppss//WWiinnddoowwss:
          In full-screen mode there is a single  window  represented  by  the  entire
          screen.   That single window can still be changed to display 1 of 4 differ‐
          ent ffiieelldd ggrroouuppss (see the `g' interactive command, repeated  below).   Each
          of the 4 field groups has a unique separately configurable ssuummmmaarryy aarreeaa and
          its own configurable ttaasskk aarreeaa.

          In alternate-display mode, those 4 underlying field groups can now be  made
          visible simultaneously, or can be turned _O_f_f individually at your command.

          The summary area will always exist, even if it's only the message line.  At
          any given time only _o_n_e summary area can be displayed.  However,  depending
          on  your  commands, there could be from _z_e_r_o to _f_o_u_r separate task displays
          currently showing on the screen.

       CCuurrrreenntt WWiinnddooww:
          The `current' window is the window associated with the summary area and the
          window to which task related commands are always directed.  Since in alter‐
          nate-display mode you can toggle the task display _O_f_f, some commands  might
          be restricted for the `current' window.

          A  further complication arises when you have toggled the first summary area
          line _O_f_f.  With the loss of the window name (the `l' toggled line),  you'll
          not easily know what window is the `current' window.

   55bb.. CCOOMMMMAANNDDSS ffoorr WWiinnddoowwss
          -- | __  :_S_h_o_w_/_H_i_d_e_-_W_i_n_d_o_w_(_s_) toggles
              The `-' key turns the `current' window's task display _O_n and _O_f_f.  When
              _O_n, that task area will show a minimum of the columns header you've es‐
              tablished  with  the `f' interactive command.  It will also reflect any
              other task area options/toggles you've applied yielding  zero  or  more
              tasks.

              The  `_'  key  does the same for all task displays.  In other words, it
              switches between the currently visible task  display(s)  and  any  task
              display(s)  you  had toggled _O_f_f.  If all 4 task displays are currently
              visible, this interactive command will leave the summary  area  as  the
              only display element.

       *  == | ++  :_E_q_u_a_l_i_z_e_-_(_r_e_i_n_i_t_i_a_l_i_z_e_)_-_W_i_n_d_o_w_(_s_)
              The  `='  key forces the `current' window's task display to be visible.
              It also reverses any active `i' (idle tasks), `n'  (max  tasks),  `u/U'
              (user  filter),  `o/O' (other filter), `v' (hide children) and 'L' (lo‐
              cate) commands.  Also, if the window had been scrolled, it will be  re‐
              set with this command.  See topic 5c. SCROLLING a Window for additional
              information regarding vertical and horizontal scrolling.

              The `+' key does the same for all windows.  The four task displays will
              reappear, evenly balanced.  They will also have retained any customiza‐
              tions you had previously applied, except for the `i' (idle tasks),  `n'
              (max tasks), `u/U' (user filter), `o/O' (other filter), `v' (hide chil‐
              dren), `L' (locate) and scrolling interactive commands.

       *  AA  :_A_l_t_e_r_n_a_t_e_-_D_i_s_p_l_a_y_-_M_o_d_e toggle
              This command will switch between full-screen mode and alternate-display
              mode.

              The  first  time you issue this command, all four task displays will be
              shown.  Thereafter when you switch modes, you will see  only  the  task
              display(s) you've chosen to make visible.

       *  aa | ww  :_N_e_x_t_-_W_i_n_d_o_w_-_F_o_r_w_a_r_d_/_B_a_c_k_w_a_r_d
              This will change the `current' window, which in turn changes the window
              to which commands are directed.  These keys act in a  circular  fashion
              so you can reach any desired window using either key.

              Assuming  the  window  name  is visible (you have not toggled `l' _O_f_f),
              whenever the `current' window name loses its emphasis/color,  that's  a
              reminder the task display is _O_f_f and many commands will be restricted.

       *  gg  :_C_h_o_o_s_e_-_A_n_o_t_h_e_r_-_W_i_n_d_o_w_/_F_i_e_l_d_-_G_r_o_u_p
              You  will be prompted to enter a number between 1 and 4 designating the
              field group which should be made the `current' window.

              In full-screen mode, this command is necessary to alter  the  `current'
              window.   In alternate-display mode, it is simply a less convenient al‐
              ternative to the `a' and `w' commands.

          GG  :_C_h_a_n_g_e_-_W_i_n_d_o_w_/_F_i_e_l_d_-_G_r_o_u_p_-_N_a_m_e
              You will be prompted for a new name to be applied to the `current' win‐
              dow.  It does not require that the window name be visible (the `l' tog‐
              gle to be _O_n).

       *  The interactive commands shown with an asterisk (`*') have use  beyond  al‐
          ternate-display mode.
              =, A, g    are always available
              a, w       act the same with color mapping
                         and fields management

   55cc.. SSCCRROOLLLLIINNGG aa WWiinnddooww
       Typically a task window is a partial view into a systems's total tasks/threads
       which shows only some of the available fields/columns.  With  these  scrolling
       keys,  you can move that view vertically or horizontally to reveal any desired
       task or column.

       UUpp,PPggUUpp  :_S_c_r_o_l_l_-_T_a_s_k_s
           Move the view up toward the first task row, until the first task  is  dis‐
           played  at the top of the `current' window.  The _U_p arrow key moves a sin‐
           gle line while _P_g_U_p scrolls the entire window.

       DDoowwnn,PPggDDnn  :_S_c_r_o_l_l_-_T_a_s_k_s
           Move the view down toward the last task row, until the last  task  is  the
           only  task  displayed  at the top of the `current' window.  The _D_o_w_n arrow
           key moves a single line while _P_g_D_n scrolls the entire window.

       LLeefftt,RRiigghhtt  :_S_c_r_o_l_l_-_C_o_l_u_m_n_s
           Move the view of displayable fields horizontally one column at a time.

           NNoottee: As a reminder, some fields/columns are not fixed-width but allocated
           all  remaining  screen  width when visible.  When scrolling right or left,
           that feature may produce some unexpected results initially.

           Additionally, there are special provisions for any  variable  width  field
           when  positioned  as the last displayed field.  Once that field is reached
           via the right arrow key, and is thus the only column shown, you  can  con‐
           tinue scrolling horizontally within such a field.  See the `C' interactive
           command below for additional information.

       HHoommee  :_J_u_m_p_-_t_o_-_H_o_m_e_-_P_o_s_i_t_i_o_n
           Reposition the display to the un-scrolled coordinates.

       EEnndd  :_J_u_m_p_-_t_o_-_E_n_d_-_P_o_s_i_t_i_o_n
           Reposition the display so that the rightmost column reflects the last dis‐
           playable field and the bottom task row represents the last task.

           NNoottee: From this position it is still possible to scroll _d_o_w_n and _r_i_g_h_t us‐
           ing the arrow keys.  This is true until a single column and a single  task
           is left as the only display element.

       CC  :_S_h_o_w_-_s_c_r_o_l_l_-_c_o_o_r_d_i_n_a_t_e_s toggle
           Toggle  an  informational  message which is displayed whenever the message
           line is not otherwise being used.  That message will take one of two forms
           depending  on  whether  or  not  a  variable  width  column  has also been
           scrolled.

             ssccrroollll ccoooorrddiinnaatteess:: yy == nn//nn ((ttaasskkss)),, xx == nn//nn ((ffiieellddss))
             scroll coordinates: y = n/n (tasks), x = n/n (fields) ++ nnnn

           The coordinates shown as nn/nn are relative to the upper left corner of  the
           `current'  window.  The additional `++ nnnn' represents the displacement into
           a variable width column when it has been scrolled horizontally.  Such dis‐
           placement  occurs in normal 8 character tab stop amounts via the right and
           left arrow keys.

           yy == nn//nn ((ttaasskkss))
               The first nn represents the topmost visible task and is  controlled  by
               scrolling  keys.  The second nn is updated automatically to reflect to‐
               tal tasks.

           xx == nn//nn ((ffiieellddss))
               The first nn represents the leftmost displayed column and is controlled
               by  scrolling  keys.   The second nn is the total number of displayable
               fields and is established with the `ff' interactive command.

       The above interactive commands are aallwwaayyss available in  full-screen  mode  but
       nneevveerr  available in alternate-display mode if the `current' window's task dis‐
       play has been toggled _O_f_f.

       NNoottee: When any form of filtering is active, you can expect some slight aberra‐
       tions  when  scrolling  since not all tasks will be visible.  This is particu‐
       larly apparent when using the Up/Down arrow keys.

   55dd.. SSEEAARRCCHHIINNGG iinn aa WWiinnddooww
       You can use these interactive commands to locate a task row containing a  par‐
       ticular value.

       LL  :_L_o_c_a_t_e_-_a_-_s_t_r_i_n_g
           You will be prompted for the case-sensitive string to locate starting from
           the current window coordinates.   There  are  no  restrictions  on  search
           string content.

           Searches  are not limited to values from a single field or column.  All of
           the values displayed in a task row are allowed in a  search  string.   You
           may include spaces, numbers, symbols and even forest view artwork.

           Keying  <Enter> with no input will effectively disable the `&' key until a
           new search string is entered.

       &&  :_L_o_c_a_t_e_-_n_e_x_t
           Assuming a search string has been established, top will attempt to  locate
           the next occurrence.

       When  a  match  is found, the current window is repositioned vertically so the
       task row containing that string is first.  The scroll coordinates message  can
       provide  confirmation  of such vertical repositioning (see the `C' interactive
       command).  Horizontal scrolling, however, is never altered via searching.

       The availability of a matching string will be influenced by the following fac‐
       tors.

          a. Which fields are displayable from the total available,
             see topic 3b. MANAGING Fields.

          b. Scrolling a window vertically and/or horizontally,
             see topic 5c. SCROLLING a Window.

          c. The state of the command/command-line toggle,
             see the `c' interactive command.

          d. The stability of the chosen sort column,
             for example PID is good but %CPU bad.

       If  a search fails, restoring the `current' window home (unscrolled) position,
       scrolling horizontally, displaying command-lines or  choosing  a  more  stable
       sort field could yet produce a successful `&' search.

       The  above  interactive  commands are aallwwaayyss available in full-screen mode but
       nneevveerr available in alternate-display mode if the `current' window's task  dis‐
       play has been toggled _O_f_f.

       NNoottee: Whenever a Search is active in a window, top will turn column highlight‐
       ing _O_f_f to prevent false matches on  internal  non-display  escape  sequences.
       Such  highlighting  will  be  restored when a window's search string is empty.
       See the `x' interactive command for  additional  information  on  sort  column
       highlighting.

   55ee.. FFIILLTTEERRIINNGG iinn aa WWiinnddooww
       You  can use this `Other Filter' feature to establish selection criteria which
       will then determine which tasks are shown in the `current' window.  Such  fil‐
       ters can be made presistent if preserved in the rcfile via the 'W' interactive
       command.

       Establishing a filter requires: 1) a field name; 2) an operator; and 3) a  se‐
       lection value, as a minimum.  This is the most complex of top's user input re‐
       quirements so, when you make a mistake, command recall will  be  your  friend.
       Remember the Up/Down arrow keys or their aliases when prompted for input.

       FFiilltteerr BBaassiiccss

          1. field names are case sensitive and spelled as in the header

          2. selection values need not comprise the full displayed field

          3. a selection is either case insensitive or sensitive to case

          4. the default is inclusion, prepending `!' denotes exclusions

          5. multiple selection criteria can be applied to a task window

          6. inclusion and exclusion criteria can be used simultaneously

          7. the 1 equality and 2 relational filters can be freely mixed

          8. separate unique filters are maintained for each task window

          If  a  field is not turned on or is not currently in view, then your selec‐
          tion criteria will not affect the display.  Later, should a filtered  field
          become visible, the selection criteria will then be applied.

       KKeeyybbooaarrdd SSuummmmaarryy

         oo  :_O_t_h_e_r_-_F_i_l_t_e_r (lower case)
             You will be prompted to establish a filter that iiggnnoorreess ccaassee when match‐
             ing.

         OO  :_O_t_h_e_r_-_F_i_l_t_e_r (upper case)
             You will be prompted to establish a ccaassee sseennssiittiivvee filter.

        ^^OO  :_S_h_o_w_-_A_c_t_i_v_e_-_F_i_l_t_e_r_s (Ctrl key + `o')
             This can serve as a reminder of which filters are active  in  the  `cur‐
             rent'  window.   A  summary  will be shown on the message line until you
             press the <Enter> key.

         ==  :_R_e_s_e_t_-_F_i_l_t_e_r_i_n_g in current window
             This clears all of your selection criteria in the `current' window.   It
             also has additional impact so please see topic 4a. GLOBAL Commands.

         ++  :_R_e_s_e_t_-_F_i_l_t_e_r_i_n_g in all windows
             This  clears  the selection criteria in all windows, assuming you are in
             alternate-display mode.  As with the `=' interactive command, it too has
             additional  consequences so you might wish to see topic 5b. COMMANDS for
             Windows.

       IInnppuutt RReeqquuiirreemmeennttss

          When prompted for selection criteria, the data you provide must take one of
          two  forms.   There are 3 required pieces of information, with a 4th as op‐
          tional.  These examples use spaces for clarity  but  your  input  generally
          would not.
                  #1           ##22  #3              ( required )
                  Field-Name   ?   include-if-value
               !!  Field-Name   ?   eexxcclluuddee-if-value
               #4                                  ( optional )

          Items  #1, #3 and #4 should be self-explanatory.  Item ##22 represents both a
          required _d_e_l_i_m_i_t_e_r and the _o_p_e_r_a_t_o_r which must be one  of  either  equality
          (`=') or relation (`<' or `>').

          The `=' equality operator requires only a partial match and that can reduce
          your `if-value' input requirements.  The `>' or  `<'  relational  operators
          always  employ  string comparisons, even with numeric fields.  They are de‐
          signed to work with a field's default _j_u_s_t_i_f_i_c_a_t_i_o_n  and  with  homogeneous
          data.   When  some  field's  numeric amounts have been subjected to _s_c_a_l_i_n_g
          while others have not, that data is no longer homogeneous.

          If you establish a relational filter and you hhaavvee changed the  default  Nu‐
          meric  or  Character  _j_u_s_t_i_f_i_c_a_t_i_o_n, that filter is likely to fail.  When a
          relational filter is applied to a memory field and you hhaavvee nnoott changed the
          _s_c_a_l_i_n_g, it may produce misleading results.  This happens, for example, be‐
          cause `100.0m' (MiB) would appear greater than `1.000g' (GiB) when compared
          as strings.

          If  your  filtered results appear suspect, simply altering justification or
          scaling may yet achieve the desired objective.  See the `j',  `J'  and  `e'
          interactive commands for additional information.

       PPootteennttiiaall PPrroobblleemmss

          These  GGRROOUUPP filters could produce the exact same results or the second one
          might not display anything at all, just a blank task window.
               GROUP=root        ( only the same results when )
               GROUP=ROOT        ( invoked via lower case `o' )

          Either of these RREESS filters might yield inconsistent and/or misleading  re‐
          sults,  depending  on  the  current memory scaling factor.  Or both filters
          could produce the exact same results.
               RES>9999          ( only the same results when )
               !RES<10000        ( memory scaling is at `KiB' )

          This nnMMiinn filter illustrates a problem unique  to  scalable  fields.   This
          particular field can display a maximum of 4 digits, beyond which values are
          automatically scaled to KiB or above.  So while amounts greater  than  9999
          exist, they will appear as 2.6m, 197k, etc.
               nMin>9999         ( always a blank task window )

       PPootteennttiiaall SSoolluuttiioonnss

          These  examples illustrate how Other Filtering can be creatively applied to
          achieve almost any desired result.  Single quotes are  sometimes  shown  to
          delimit the spaces which are part of a filter or to represent a request for
          status (^O) accurately.  But if you used them with if-values in real  life,
          no matches would be found.

          Assuming  field  nnTTHH  is  displayed,  the  first filter will result in only
          multi-threaded processes being shown.  It also reminds us that  a  trailing
          space is part of every displayed field.  The second filter achieves the ex‐
          act same results with less typing.
               !nTH=` 1 '                ( ' for clarity only )
               nTH>1                     ( same with less i/p )

          With Forest View mode active and the CCOOMMMMAANNDD column in  view,  this  filter
          effectively collapses child processes so that just 3 levels are shown.
               !COMMAND=`       `- '     ( ' for clarity only )

          The final two filters appear as in response to the status request key (^O).
          In reality, each filter would have required separate input.  The PPRR example
          shows the two concurrent filters necessary to display tasks with priorities
          of 20 or more, since some might be negative.  Then by  exploiting  trailing
          spaces,  the  nnMMiinn series of filters could achieve the failed `9999' objec‐
          tive discussed above.
               `PR>20' + `!PR=-'         ( 2 for right result )
               `!nMin=0 ' + `!nMin=1 ' + `!nMin=2 ' + `!nMin=3 ' ...

       NNoottee: Whenever Other Filtering is active in a window,  top  will  turn  column
       highlighting  _O_f_f  to prevent false matches on internal non-display escape se‐
       quences.  Such highlighting will be restored when a window is no  longer  sub‐
       ject to filtering.  See the `x' interactive command for additional information
       on sort column highlighting.

66.. FFIILLEESS
   66aa.. PPEERRSSOONNAALL CCoonnffiigguurraattiioonn FFiillee
       This file is created or updated via the 'W' interactive command.

       The legacy version is written as `$HOME/.your-name-4-top' + `rc' with a  lead‐
       ing period.

       A  newly  created  configuration  file is written as procps/your-name-4-top' +
       `rc' without a leading period.  The procps directory will  be  subordinate  to
       either  $XDG_CONFIG_HOME when set as an absolute path or the $HOME/.config di‐
       rectory.

       While not intended to be edited manually, here is the general layout:
           global   # line  1: the program name/alias notation
             "      # line  2: id,altscr,irixps,delay,curwin
           per ea   # line  a: winname,fieldscur
           window   # line  b: winflags,sortindx,maxtasks,graph modes
             "      # line  c: summclr,msgsclr,headclr,taskclr
           global   # line 15: additional miscellaneous settings
             "      # any remaining lines are devoted to optional
             "      # active 'other filters' discussed in section 5e above
             "      # plus 'inspect' entries discussed in section 6b below

       If a valid absolute path to the rcfile cannot be  established,  customizations
       made to a running top will be impossible to preserve.

   66bb.. AADDDDIINNGG IINNSSPPEECCTT EEnnttrriieess
       To exploit the `Y' interactive command, you must add entries at the eenndd of the
       top personal configuration file.  Such entries simply reflect  a  file  to  be
       read  or  command/pipeline to be executed whose results will then be displayed
       in a separate scrollable, searchable window.

       If you don't know the location or name of your top rcfile, use the `W'  inter‐
       active command to rewrite it and note those details.

       Inspect entries can be added with a redirected echo or by editing the configu‐
       ration file.  Redirecting an echo risks overwriting the rcfile should  it  re‐
       place (>) rather than append (>>) to that file.  Conversely, when using an ed‐
       itor care must be taken not to corrupt existing lines, some of which will con‐
       tain unprintable data or unusual characters.

       Those  Inspect  entries beginning with a `#' character are ignored, regardless
       of content.  Otherwise they consist of the following 3 elements, each of which
       _m_u_s_t be separated by a tab character (thus 2 `\t' total):

         .type:  literal `file' or `pipe'
         .name:  selection shown on the Inspect screen
         .fmts:  string representing a path or command

       The  two  types  of Inspect entries are _n_o_t interchangeable.  Those designated
       `ffiillee' will be accessed using fopen and must reference a single  file  in  the
       `.fmts'  element.   Entries specifying `ppiippee' will employ popen, their `.fmts'
       element could contain many pipelined commands and, none can be interactive.

       If the file or pipeline represented in your `.fmts' deals  with  the  specific
       PID  input or accepted when prompted, then the format string must also contain
       the `%%dd' specifier, as these examples illustrate.

         .fmts=  /proc/_%_d/numa_maps
         .fmts=  lsof -P -p _%_d

       For `ppiippee' type entries only, you may also wish to redirect stderr  to  stdout
       for a more comprehensive result.  Thus the format string becomes:

         .fmts=  pmap -x %d _2_>_&_1

       Here are examples of both types of Inspect entries as they might appear in the
       rcfile.  The first entry will be ignored due to  the  initial  `#'  character.
       For  clarity,  the pseudo tab depictions (^I) are surrounded by an extra space
       but the actual tabs would not be.

         # pipe ^I Sockets ^I lsof -n -P -i 2>&1
         pipe ^I Open Files ^I lsof -P -p %d 2>&1
         file ^I NUMA Info ^I /proc/%d/numa_maps
         pipe ^I Log ^I tail -n100 /var/log/syslog | sort -Mr

       Except for the commented entry above, these next examples show what  could  be
       echoed  to  achieve  similar  results,  assuming the rcfile name was `.toprc'.
       However, due to the embedded tab characters, each of  these  lines  should  be
       preceded  by  `//bbiinn//eecchhoo --ee', not just a simple an `echo', to enable backslash
       interpretation regardless of which shell you use.

         "pipe\tOpen Files\tlsof -P -p %d 2>&1" >> ~/.toprc
         "file\tNUMA Info\t/proc/%d/numa_maps" >> ~/.toprc
         "pipe\tLog\ttail -n200 /var/log/syslog | sort -Mr" >> ~/.toprc

       If any inspect entry you create produces output  with  unprintable  characters
       they will be displayed in either the ^C notation or hexadecimal <FF> form, de‐
       pending on their value.  This applies to tab characters as  well,  which  will
       show as `^I'.  If you want a truer representation, any embedded tabs should be
       expanded.  The following example takes what could have been a `file' entry but
       employs a `pipe' instead so as to expand the embedded tabs.

         # next would have contained `\t' ...
         # file ^I <your_name> ^I /proc/%d/status
         # but this will eliminate embedded `\t' ...
         pipe ^I <your_name> ^I cat /proc/%d/status | expand -

       NNoottee:  Some programs might rely on _S_I_G_I_N_T to end.  Therefore, if a `ppiippee' such
       as the following is established, one must use Ctrl-C to terminate it in  order
       to review the results.  This is the single occasion where a `^C' will not also
       terminate top.

         pipe ^I Trace ^I /usr/bin/strace -p %d 2>&1

       Lastly, while `ppiippee' type entries have been discussed in  terms  of  pipelines
       and commands, there is nothing to prevent you from including  _s_h_e_l_l _s_c_r_i_p_t_s as
       well.  Perhaps even newly created scripts designed specifically  for  the  `Y'
       interactive command.

       For  example,  as the number of your Inspect entries grows over time, the `Op‐
       tions:' row will be truncated when screen width is exceeded.   That  does  not
       affect  operation  other  than to make some selections invisible.  However, if
       some choices are lost to truncation but you want to see more options, there is
       an easy solution hinted at below.

         Inspection Pause at pid ...
         Use:  left/right then <Enter> ...
         Options:  help  1  2  3  4  5  6  7  8  9  10  11 ...

       The  entries in the top rcfile would have a number for the `.name' element and
       the `help' entry would identify a shell script you've written explaining  what
       those  numbered  selections actually mean.  In that way, many more choices can
       be made visible.

   66cc.. SSYYSSTTEEMM CCoonnffiigguurraattiioonn FFiillee
       This configuration file represents defaults for users who have not saved their
       own configuration file.  The format mirrors exactly the personal configuration
       file and can also include `inspect' entries as explained above.

       Creating it is a simple process.

       1. Configure top appropriately for your installation and preserve that config‐
       uration with the `W' interactive command.

       2. Add and test any desired `inspect' entries.

       3. Copy that configuration file to the _/_e_t_c_/ directory as `ttooppddeeffaauullttrrcc'.

   66dd.. SSYYSSTTEEMM RReessttrriiccttiioonnss FFiillee
       The  presence  of this file will influence which version of the help screen is
       shown to an ordinary user.

       More importantly, it will limit what ordinary users are allowed to do when top
       is running.  They will not be able to issue the following commands.
           k        Kill a task
           r        Renice a task
           d or s   Change delay/sleep interval

       This configuration file is not created by top.  Rather, it is created manually
       and placed it in the _/_e_t_c_/ directory as `ttoopprrcc'.

       It should have exactly two lines, as shown in this example:
           s        # line 1: secure mode switch
           5.0      # line 2: delay interval in seconds

77.. SSTTUUPPIIDD TTRRIICCKKSS SSaammpplleerr
       Many of these tricks work best when you give top a scheduling boost.  So  plan
       on starting him with a nice value of -10, assuming you've got the authority.

   77aa.. KKeerrnneell MMaaggiicc
       For these stupid tricks, top needs full-screen mode.

       •  The  user  interface,  through prompts and help, intentionally implies that
          the delay interval is limited to tenths of a second.  However, you're  free
          to set any desired delay.  If you want to see Linux at his scheduling best,
          try a delay of .09 seconds or less.

          For this experiment, under x-windows open an xterm and maximize  it.   Then
          do the following:
            . provide a scheduling boost and tiny delay via:
                nice -n -10 top -d.09
            . keep sorted column highlighting _O_f_f so as to
              minimize path length
            . turn _O_n reverse row highlighting for emphasis
            . try various sort columns (TIME/MEM work well),
              and normal or reverse sorts to bring the most
              active processes into view

          What  you'll  see is a very busy Linux doing what he's always done for you,
          but there was no program available to illustrate this.

       •  Under an xterm using `white-on-black' colors, on top's Color Mapping screen
          set  the  task  color to black and be sure that task highlighting is set to
          bold, not reverse.  Then set the delay interval to around .3 seconds.

          After bringing the most active processes into view, what you'll see are the
          ghostly images of just the currently running tasks.

       •  Delete  the  existing rcfile, or create a new symlink.  Start this new ver‐
          sion then type `T' (a secret key, see topic 4c. Task Area  Commands,  SORT‐
          ING)  followed by `W' and `q'.  Finally, restart the program with -d0 (zero
          delay).

          Your display will be refreshed at three times the rate of the former top, a
          300%  speed advantage.  As top climbs the TIME ladder, be as patient as you
          can while speculating on whether or not top will ever reach the top.

   77bb.. BBoouunncciinngg WWiinnddoowwss
       For these stupid tricks, top needs alternate-display mode.

       •  With 3 or 4 task displays visible, pick any window other than the last  and
          turn  idle  processes _O_f_f using the `i' command toggle.  Depending on where
          you applied `i', sometimes several task displays are bouncing and sometimes
          it's like an accordion, as top tries his best to allocate space.

       •  Set  each window's summary lines differently: one with no memory (`m'); an‐
          other with no states (`t'); maybe one with nothing at all, just the message
          line.   Then hold down `a' or `w' and watch a variation on bouncing windows
           --  hopping windows.

       •  Display all 4 windows and for each, in turn, set idle processes to _O_f_f  us‐
          ing the `i' command toggle.  You've just entered the "extreme bounce" zone.

   77cc.. TThhee BBiigg BBiirrdd WWiinnddooww
       This stupid trick also requires alternate-display mode.

       •  Display  all  4  windows  and make sure that 1:Def is the `current' window.
          Then, keep increasing window size with the `n'  interactive  command  until
          all the other task displays are "pushed out of the nest".

          When  they've all been displaced, toggle between all visible/invisible win‐
          dows using the `_' command toggle.  Then ponder this:
             is top fibbing or telling honestly your imposed truth?

   77dd.. TThhee OOll'' SSwwiittcchheerroooo
       This stupid trick works best without alternate-display mode, since  justifica‐
       tion is active on a per window basis.

       •  Start  top and make COMMAND the last (rightmost) column displayed.  If nec‐
          essary, use the `c' command toggle to display command lines and ensure that
          forest view mode is active with the `V' command toggle.

          Then  use the up/down arrow keys to position the display so that some trun‐
          cated command lines are shown (`+' in last position).  You may have to  re‐
          size your xterm to produce truncation.

          Lastly,  use the `j' command toggle to make the COMMAND column right justi‐
          fied.

          Now use the right arrow key to reach the COMMAND column.   Continuing  with
          the  right arrow key, watch closely the direction of travel for the command
          lines being shown.

             some lines travel left, while others travel right

             eventually all lines will Switcheroo, and move right

88.. BBUUGGSS
       Please send bug reports to ⟨procps@freelists.org⟩.

99.. SSEEEE AAllssoo
       ffrreeee(1), ppss(1), uuppttiimmee(1), aattoopp(1), ssllaabbttoopp(1), vvmmssttaatt(8), ww(1)

procps-ng                            October 2019                              TOP(1)
